#!/usr/bin/env python3

import os
import sys
import numpy as np
import argparse
from kaffe import KaffeError, print_stderr
from kaffe.tensorflow import TensorFlowTransformer
from kaffe.trinnity import TrinnityTransformer

def fatal_error(msg):
  print_stderr(msg)
  exit(-1)

def validate_arguments(args):
  if (args.data_output is not None) and (args.model is None):
    fatal_error('No input data path provided.')
  if (args.model is not None) and (args.data_output is None):
    fatal_error('No output data path provided.')
  if (args.code_output is None) and (args.data_output is None):
    fatal_error('No output paths specified.')

def convert_tensorflow(def_path, caffemodel_path, data_output_path, code_output_path, phase):
  try:
    transformer = TensorFlowTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: tensorflow')

    if caffemodel_path is not None:
      data = transformer.transform_data()
      print_stderr('Converting weights...')
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'wb') as src_out:
        src_out.write(transformer.transform_source())
    print_stderr('Done.')
  except KaffeError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_trinnity(def_path, caffemodel_path, data_output_path, code_output_path, phase):
  try:
    transformer = TrinnityTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: triNNity')

    if caffemodel_path is not None:
      data = transformer.transform_data()
      print_stderr('Converting weights...')
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'wb') as src_out:
        src_out.write(transformer.transform_source())
    print_stderr('Done.')
  except KaffeError as err:
    fatal_error('Error encountered: {}'.format(err))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', help='Input model definition (.prototxt) path')
    parser.add_argument('--weights', help='Input model data (.caffemodel) path')
    parser.add_argument('--data-output', help='Place converted weights in this directory')
    parser.add_argument('--code-output', help='Generated source code in this directory')
    parser.add_argument('--backend', default='tensorflow' help='Which backend to use for code generation')
    parser.add_argument('-p',
                        '--phase',
                        default='test',
                        help='The phase to convert: test (default) or train')
    args = parser.parse_args()
    validate_arguments(args)
    convert(args.def_path, args.caffemodel, args.data_output_path, args.code_output_path, args.phase)

if __name__ == '__main__':
    main()
