#!/usr/bin/env python3

import os
import sys
import numpy as np
import argparse

from triNNity.frontend import CompilerError, print_stderr

backends = ['optimizer-info', 'trinnity', 'armcl', 'mkldnn', 'tensorflow']

def fatal_error(msg):
  print_stderr(msg)
  exit(-1)

def validate_arguments(args):
  if (not args.backend in backends):
    fatal_error('Unknown backend selected (valid choices are: ' + ', '.join(backends) + ')')
  if (args.model is None) and (args.code_output is not None) :
    fatal_error('Model code generation requested but no input model description provided.')
  if (args.weights is None) and (args.data_output is not None) :
    fatal_error('Weight conversion requested but no input weight data provided.')
  if (args.code_output is None) and \
     (args.data_output is None) and \
     (args.topology_output is None) and \
     (args.layers_output is None) and \
     (args.graph_output is None) and \
     (args.constraints_output is None):
    fatal_error('No output paths specified.')

def convert_tensorflow(def_path, caffemodel_path, data_output_path, code_output_path, phase, verbose):
  try:
    from triNNity.backend.tensorflow import TensorFlowTransformer, TensorFlowRuntime
    transformer = TensorFlowTransformer(def_path, caffemodel_path, verbose=verbose, phase=phase)
    print_stderr('Compiling for backend: TensorFlow')

    if caffemodel_path is not None:
      print_stderr('Converting weights...')
      data = transformer.transform_data()
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        tsrc = transformer.transform_source()
        runtime = TensorFlowRuntime(src_out)
        runtime.generate(tsrc, transformer.graph.name)
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_trinnity(def_path, caffemodel_path, data_output_path, code_output_path, phase, verbose):
  try:
    from triNNity.backend.triNNity import TrinnityTransformer, TrinnityRuntime
    transformer = TrinnityTransformer(def_path, caffemodel_path, verbose=verbose, phase=phase)
    print_stderr('Compiling for backend: triNNity')

    if caffemodel_path is not None:
      print_stderr('Converting weights...')
      data = transformer.transform_data()
      for (name, blobs) in data.items():
        for (bname, bdata) in blobs.items():
          shape = '_'.join([str(x) for x in bdata.shape])
          with open(os.path.join(data_output_path, name + '.' + bname + '.' + shape + '.bin'), 'wb') as data_out:
            data_out.write(bdata.tobytes('C'))

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        tsrc = transformer.transform_source()
        runtime = TrinnityRuntime(src_out)
        runtime.generate(tsrc, transformer)
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_armcl(def_path, caffemodel_path, data_output_path, code_output_path, phase, verbose):
  try:
    from triNNity.backend.armcl import ARMCLTransformer, ARMCLRuntime
    transformer = ARMCLTransformer(def_path, caffemodel_path, verbose=verbose, phase=phase)
    print_stderr('Compiling for backend: ARMCL')

    if caffemodel_path is not None:
      print_stderr('Converting weights...')
      data = transformer.transform_data()
      for (name, blobs) in data.items():
        for (bname, bdata) in blobs.items():
          shape = '_'.join([str(x) for x in bdata.shape])
          with open(os.path.join(data_output_path, name + '.' + bname + '.' + shape + '.bin'), 'wb') as data_out:
            data_out.write(bdata.tobytes('C'))

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        tsrc = transformer.transform_source()
        runtime = ARMCLRuntime(src_out)
        runtime.generate(tsrc, transformer)
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_mkldnn(def_path, caffemodel_path, data_output_path, code_output_path, phase, verbose):
  try:
    from triNNity.backend.mkldnn import MKLDNNTransformer, MKLDNNRuntime
    transformer = MKLDNNTransformer(def_path, caffemodel_path, verbose=verbose, phase=phase)
    print_stderr('Compiling for backend: MKLDNN')

    if caffemodel_path is not None:
      print_stderr('Converting weights...')
      data = transformer.transform_data()
      for (name, blobs) in data.items():
        for (bname, bdata) in blobs.items():
          shape = '_'.join([str(x) for x in bdata.shape])
          with open(os.path.join(data_output_path, name + '.' + bname + '.' + shape + '.bin'), 'wb') as data_out:
            data_out.write(bdata.tobytes('C'))

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        tsrc = transformer.transform_source()
        runtime = MKLDNNRuntime(src_out)
        runtime.generate(tsrc, transformer)
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_optimizer_info(def_path, caffemodel_path, topo_output_path, layer_output_path, constraints_output_path, graph_output_path, phase, verbose):
  try:
    from triNNity.backend.optimizer_info import InfoTransformer
    transformer = InfoTransformer(def_path, caffemodel_path, verbose=verbose, phase=phase)
    print_stderr('Compiling for backend: optimizer info')

    tsrc = transformer.transform_source()
    if topo_output_path:
      print_stderr('Generating topology for model...')
      with open(topo_output_path, 'w') as src_out:
        src_out.write(tsrc[0])

    if layer_output_path:
      print_stderr('Generating layer info for model...')
      with open(layer_output_path, 'w') as src_out:
        src_out.write(tsrc[1])

    if constraints_output_path:
      print_stderr('Generating layer constraint info for model...')
      with open(constraints_output_path, 'w') as src_out:
        src_out.write(tsrc[2])

    if graph_output_path:
      print_stderr('Generating visual graph description for model...')
      with open(graph_output_path, 'w') as src_out:
        nodes = tsrc[3]
        node_indices = range(0, len(nodes))
        edges = tsrc[4]
        src_out.write('strict digraph "' + transformer.graph.name + '" {\n')
        for (k, v) in zip(node_indices, nodes):
          src_out.write(str(k) + ' [label=' + v + '];\n')
        for (a, b) in edges:
          try:
            e_src = nodes.index(a)
            e_sink = nodes.index(b)
            src_out.write(str(e_src) + ' -> ' + str(e_sink) + ';\n')
          except:
            print_stderr("Missing node for edge " + a + " -> " + b)
        src_out.write('}')

    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', help='Input model definition (.prototxt) path')
    parser.add_argument('--weights', help='Input model data (.caffemodel) path')
    parser.add_argument('--data-output', help='Place converted weights in this directory')
    parser.add_argument('--code-output', help='Generate source code into this file')
    parser.add_argument('--topology-output', help='Generate topology description into this file')
    parser.add_argument('--layers-output', help='Generate layer description into this file')
    parser.add_argument('--constraints-output', help='Generate layer constraints into this file')
    parser.add_argument('--graph-output', help='Generate visual graph description into this file')
    parser.add_argument('--backend', default='trinnity', help='Which backend to use for code generation')
    parser.add_argument('-p',
                        '--phase',
                        default='test',
                        help='The phase to convert: test (default) or train')
    parser.add_argument('-v',
                        '--verbose',
                        help='Verbose compilation output')
    args = parser.parse_args()
    validate_arguments(args)
    if (args.backend == 'tensorflow'):
      convert_tensorflow(args.model, args.weights, args.data_output, args.code_output, args.phase, args.verbose)
    elif (args.backend == 'trinnity'):
      convert_trinnity(args.model, args.weights, args.data_output, args.code_output, args.phase, args.verbose)
    elif (args.backend == 'armcl'):
      convert_armcl(args.model, args.weights, args.data_output, args.code_output, args.phase, args.verbose)
    elif (args.backend == 'mkldnn'):
      convert_mkldnn(args.model, args.weights, args.data_output, args.code_output, args.phase, args.verbose)
    elif (args.backend == 'optimizer-info'):
      convert_optimizer_info(args.model, args.weights, args.topology_output, args.layers_output, args.constraints_output, args.graph_output, args.phase, args.verbose)
    else:
      fatal_error('No backend selected')

if __name__ == '__main__':
    main()
