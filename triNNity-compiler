#!/usr/bin/env python3

import os
import sys
import numpy as np
import argparse

from compiler.frontend import CompilerError, print_stderr

backends = ['optimizer-info', 'trinnity', 'tensorflow']

def fatal_error(msg):
  print_stderr(msg)
  exit(-1)

def validate_arguments(args):
  if (not args.backend in backends):
    fatal_error('Unknown backend selected (valid choices are: ' + ', '.join(backends) + ')')
  if (args.model is None) and (args.code_output is not None) :
    fatal_error('Model code generation requested but no input model description provided.')
  if (args.weights is None) and (args.data_output is not None) :
    fatal_error('Weight conversion requested but no input weight data provided.')
  if (args.code_output is None) and \
     (args.data_output is None) and \
     (args.topology_output is None) and \
     (args.layers_output is None) and \
     (args.constraints_output is None):
    fatal_error('No output paths specified.')

def convert_tensorflow(def_path, caffemodel_path, data_output_path, code_output_path, phase):
  preamble = '''#!/usr/bin/env python
import numpy as np
import tensorflow as tf

DEFAULT_PADDING = 'SAME'

def layer(op):

    def layer_decorated(self, *args, **kwargs):
        name = kwargs.setdefault('name', self.get_unique_name(op.__name__))
        if len(self.terminals) == 0:
            raise RuntimeError('No input variables found for layer %s.' % name)
        elif len(self.terminals) == 1:
            layer_input = self.terminals[0]
        else:
            layer_input = list(self.terminals)
        layer_output = op(self, layer_input, *args, **kwargs)
        self.layers[name] = layer_output
        self.feed(layer_output)
        return self

    return layer_decorated

class Network(object):

    def __init__(self, inputs, trainable=True):
        self.inputs = inputs
        self.terminals = []
        self.layers = dict(inputs)
        self.trainable = trainable
        self.use_dropout = tf.placeholder_with_default(tf.constant(1.0),
                                                       shape=[],
                                                       name='use_dropout')
        self.setup()

    def setup(self):
        raise NotImplementedError('Must be implemented by the subclass.')

    def load(self, data_path, session, ignore_missing=False):
        data_dict = np.load(data_path).item()
        for op_name in data_dict:
            with tf.variable_scope(op_name, reuse=True):
                for param_name, data in data_dict[op_name].iteritems():
                    try:
                        var = tf.get_variable(param_name)
                        session.run(var.assign(data))
                    except ValueError:
                        if not ignore_missing:
                            raise

    def feed(self, *args):
        assert len(args) != 0
        self.terminals = []
        for fed_layer in args:
            if isinstance(fed_layer, basestring):
                try:
                    fed_layer = self.layers[fed_layer]
                except KeyError:
                    raise KeyError('Unknown layer name fed: %s' % fed_layer)
            self.terminals.append(fed_layer)
        return self

    def get_output(self):
        return self.terminals[-1]

    def get_unique_name(self, prefix):
        ident = sum(t.startswith(prefix) for t, _ in self.layers.items()) + 1
        return '%s_%d' % (prefix, ident)

    def make_var(self, name, shape):
        return tf.get_variable(name, shape, trainable=self.trainable)

    def validate_padding(self, padding):
        assert padding in ('SAME', 'VALID')

    @layer
    def conv(self,
             input,
             k_h,
             k_w,
             c_o,
             s_h,
             s_w,
             name,
             relu=True,
             padding=DEFAULT_PADDING,
             group=1,
             biased=True):
        self.validate_padding(padding)
        c_i = input.get_shape()[-1]
        assert c_i % group == 0
        assert c_o % group == 0
        convolve = lambda i, k: tf.nn.conv2d(i, k, [1, s_h, s_w, 1], padding=padding)
        with tf.variable_scope(name) as scope:
            kernel = self.make_var('weights', shape=[k_h, k_w, c_i / group, c_o])
            if group == 1:
                output = convolve(input, kernel)
            else:
                input_groups = tf.split(3, group, input)
                kernel_groups = tf.split(3, group, kernel)
                output_groups = [convolve(i, k) for i, k in zip(input_groups, kernel_groups)]
                output = tf.concat(3, output_groups)
            if biased:
                biases = self.make_var('biases', [c_o])
                output = tf.nn.bias_add(output, biases)
            if relu:
                output = tf.nn.relu(output, name=scope.name)
            return output

    @layer
    def relu(self, input, name):
        return tf.nn.relu(input, name=name)

    @layer
    def max_pool(self, input, k_h, k_w, s_h, s_w, name, padding=DEFAULT_PADDING):
        self.validate_padding(padding)
        return tf.nn.max_pool(input,
                              ksize=[1, k_h, k_w, 1],
                              strides=[1, s_h, s_w, 1],
                              padding=padding,
                              name=name)

    @layer
    def avg_pool(self, input, k_h, k_w, s_h, s_w, name, padding=DEFAULT_PADDING):
        self.validate_padding(padding)
        return tf.nn.avg_pool(input,
                              ksize=[1, k_h, k_w, 1],
                              strides=[1, s_h, s_w, 1],
                              padding=padding,
                              name=name)

    @layer
    def lrn(self, input, radius, alpha, beta, name, bias=1.0):
        return tf.nn.local_response_normalization(input,
                                                  depth_radius=radius,
                                                  alpha=alpha,
                                                  beta=beta,
                                                  bias=bias,
                                                  name=name)

    @layer
    def concat(self, inputs, axis, name):
        return tf.concat(concat_dim=axis, values=inputs, name=name)

    @layer
    def add(self, inputs, name):
        return tf.add_n(inputs, name=name)

    @layer
    def fc(self, input, num_out, name, relu=True):
        with tf.variable_scope(name) as scope:
            input_shape = input.get_shape()
            if input_shape.ndims == 4:
                dim = 1
                for d in input_shape[1:].as_list():
                    dim *= d
                feed_in = tf.reshape(input, [-1, dim])
            else:
                feed_in, dim = (input, input_shape[-1].value)
            weights = self.make_var('weights', shape=[dim, num_out])
            biases = self.make_var('biases', [num_out])
            op = tf.nn.relu_layer if relu else tf.nn.xw_plus_b
            fc = op(feed_in, weights, biases, name=scope.name)
            return fc

    @layer
    def softmax(self, input, name):
        input_shape = map(lambda v: v.value, input.get_shape())
        if len(input_shape) > 2:
            if input_shape[1] == 1 and input_shape[2] == 1:
                input = tf.squeeze(input, squeeze_dims=[1, 2])
            else:
                raise ValueError('Rank 2 tensor input expected for softmax!')
        return tf.nn.softmax(input, name=name)

    @layer
    def batch_normalization(self, input, name, scale_offset=True, relu=False):
        with tf.variable_scope(name) as scope:
            shape = [input.get_shape()[-1]]
            if scale_offset:
                scale = self.make_var('scale', shape=shape)
                offset = self.make_var('offset', shape=shape)
            else:
                scale, offset = (None, None)
            output = tf.nn.batch_normalization(
                input,
                mean=self.make_var('mean', shape=shape),
                variance=self.make_var('variance', shape=shape),
                offset=offset,
                scale=scale,
                # TODO: This is the default Caffe batch norm eps
                # Get the actual eps from parameters
                variance_epsilon=1e-5,
                name=name)
            if relu:
                output = tf.nn.relu(output)
            return output

    @layer
    def dropout(self, input, keep_prob, name):
        keep = 1 - self.use_dropout + (self.use_dropout * keep_prob)
        return tf.nn.dropout(input, keep, name=name)

def load_model(name):
  all_models = models.get_models()
  lut = {model.__name__: model for model in all_models}
  if name not in lut:
      print('Invalid model index. Options are:')
      for model in all_models:
          print('\t* {}'.format(model.__name__))
      return None
  NetClass = lut[name]

  spec = models.get_data_spec(model_class=NetClass)
  data_node = tf.placeholder(tf.float32,
                             shape=(None, spec.crop_size, spec.crop_size, spec.channels))

  return NetClass({'data': data_node})

def validate(net, model_path, image_producer, top_k=5):
    spec = models.get_data_spec(model_instance=net)
    input_node = net.inputs['data']
    label_node = tf.placeholder(tf.int32)
    probs = net.get_output()
    top_k_op = tf.nn.in_top_k(probs, label_node, top_k)
    count = 0
    correct = 0
    total = len(image_producer)

    with tf.Session() as sesh:
        coordinator = tf.train.Coordinator()
        net.load(data_path=model_path, session=sesh)
        threads = image_producer.start(session=sesh, coordinator=coordinator)
        for (labels, images) in image_producer.batches(sesh):
            correct += np.sum(sesh.run(top_k_op,
                                       feed_dict={input_node: images,
                                                  label_node: labels}))
            count += len(labels)
            cur_accuracy = float(correct) * 100 / count
            print('{:>6}/{:<6} {:>6.2f}%'.format(count, total, cur_accuracy))
        coordinator.request_stop()
        coordinator.join(threads, stop_grace_period_secs=2)
    print('Top {} Accuracy: {}'.format(top_k, float(correct) / total))
'''

  postamble = '''def main():
    # Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('model_path', help='Path to the converted model parameters (.npy)')
    parser.add_argument('ground_truth', help='Path to validation set ground truth (.txt)')
    parser.add_argument('data_dir', help='Validation set images directory path')
    parser.add_argument('--model', default='GoogleNet', help='The name of the model to evaluate')
    args = parser.parse_args()

    net = load_model(args.model)
    if net is None:
        exit(-1)

    data_spec = models.get_data_spec(model_instance=net)
    image_producer = dataset.ImageNetProducer(val_path=args.ground_truth,
                                              data_path=args.data_dir,
                                              data_spec=data_spec)

    validate(net, args.model_path, image_producer, 5)
    validate(net, args.model_path, image_producer, 1)

if __name__ == '__main__':
    main()
'''

  try:
    from compiler.backend.tensorflow import TensorFlowTransformer
    transformer = TensorFlowTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: tensorflow')

    if caffemodel_path is not None:
      data = transformer.transform_data()
      print_stderr('Converting weights...')
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        src_out.write(preamble)
        src_out.write(transformer.transform_source()[0])
        src_out.write('\n\n\n')
        src_out.write(postamble)
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_trinnity(def_path, caffemodel_path, data_output_path, code_output_path, phase):
  preamble = '''#include <triNNity/layer.h>
#include <triNNity/generic/layer.h>
#include <triNNity/dense/cpu/layer.h>

'''
  try:
    from compiler.backend.trinnity import TrinnityTransformer
    transformer = TrinnityTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: triNNity')

    if caffemodel_path is not None:
      data = transformer.transform_data()
      print_stderr('Converting weights...')
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        src_out.write(preamble)
        src_out.write(transformer.transform_source()[0])
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_optimizer_info(def_path, caffemodel_path, topo_output_path, layer_output_path, constraints_output_path, phase):
  try:
    from compiler.backend.optimizer_info import InfoTransformer
    transformer = InfoTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: optimizer info')

    if topo_output_path:
      print_stderr('Generating topology for model...')
      with open(topo_output_path, 'w') as src_out:
        src_out.write(transformer.transform_source()[0])

    if layer_output_path:
      print_stderr('Generating layer info for model...')
      with open(layer_output_path, 'w') as src_out:
        src_out.write(transformer.transform_source()[1])

    if constraints_output_path:
      print_stderr('Generating layer constraint info for model...')
      with open(constraints_output_path, 'w') as src_out:
        src_out.write(transformer.transform_source()[2])

    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', help='Input model definition (.prototxt) path')
    parser.add_argument('--weights', help='Input model data (.caffemodel) path')
    parser.add_argument('--data-output', help='Place converted weights in this directory')
    parser.add_argument('--code-output', help='Generate source code into this file')
    parser.add_argument('--topology-output', help='Generate topology description into this file')
    parser.add_argument('--layers-output', help='Generate layer description into this file')
    parser.add_argument('--constraints-output', help='Generate layer constraints into this file')
    parser.add_argument('--backend', default='trinnity', help='Which backend to use for code generation')
    parser.add_argument('-p',
                        '--phase',
                        default='test',
                        help='The phase to convert: test (default) or train')
    args = parser.parse_args()
    validate_arguments(args)
    if (args.backend == 'tensorflow'):
      convert_tensorflow(args.model, args.weights, args.data_output, args.code_output, args.phase)
    elif (args.backend == 'trinnity'):
      convert_trinnity(args.model, args.weights, args.data_output, args.code_output, args.phase)
    elif (args.backend == 'optimizer-info'):
      convert_optimizer_info(args.model, args.weights, args.topology_output, args.layers_output, args.constraints_output, args.phase)
    else:
      fatal_error('No backend selected')

if __name__ == '__main__':
    main()
