#!/usr/bin/env python3

import os
import sys
import numpy as np
import argparse

from compiler.frontend import CompilerError, print_stderr

backends = ['trinnity', 'tensorflow']

def fatal_error(msg):
  print_stderr(msg)
  exit(-1)

def validate_arguments(args):
  if (not args.backend in backends):
    fatal_error('Unknown backend selected (valid choices are: ' + ', '.join(backends) + ')')
  if (args.model is None) and (args.code_output is not None) :
    fatal_error('Model code generation requested but no input model description provided.')
  if (args.weights is None) and (args.data_output is not None) :
    fatal_error('Weight conversion requested but no input weight data provided.')
  if (args.code_output is None) and (args.data_output is None):
    fatal_error('No output paths specified.')

def convert_tensorflow(def_path, caffemodel_path, data_output_path, code_output_path, phase):
  try:
    from compiler.backend.tensorflow import TensorFlowTransformer
    transformer = TensorFlowTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: tensorflow')

    if caffemodel_path is not None:
      data = transformer.transform_data()
      print_stderr('Converting weights...')
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        src_out.write(transformer.transform_source())
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def convert_trinnity(def_path, caffemodel_path, data_output_path, code_output_path, phase):
  try:
    from compiler.backend.trinnity import TrinnityTransformer
    transformer = TrinnityTransformer(def_path, caffemodel_path, phase=phase)
    print_stderr('Compiling for backend: triNNity')

    if caffemodel_path is not None:
      data = transformer.transform_data()
      print_stderr('Converting weights...')
      with open(data_output_path, 'wb') as data_out:
        np.save(data_out, data)

    if code_output_path:
      print_stderr('Generating code for model...')
      with open(code_output_path, 'w') as src_out:
        src_out.write(transformer.transform_source())
    print_stderr('Done.')
  except CompilerError as err:
    fatal_error('Error encountered: {}'.format(err))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', help='Input model definition (.prototxt) path')
    parser.add_argument('--weights', help='Input model data (.caffemodel) path')
    parser.add_argument('--data-output', help='Place converted weights in this directory')
    parser.add_argument('--code-output', help='Generated source code in this directory')
    parser.add_argument('--backend', default='trinnity', help='Which backend to use for code generation')
    parser.add_argument('-p',
                        '--phase',
                        default='test',
                        help='The phase to convert: test (default) or train')
    args = parser.parse_args()
    validate_arguments(args)
    if (args.backend == 'tensorflow'):
      convert_tensorflow(args.model, args.weights, args.data_output, args.code_output, args.phase)
    elif (args.backend == 'trinnity'):
      convert_trinnity(args.model, args.weights, args.data_output, args.code_output, args.phase)
    else:
      fatal_error('No backend selected')

if __name__ == '__main__':
    main()
